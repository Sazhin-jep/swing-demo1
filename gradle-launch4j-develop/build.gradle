

/*
 * Copyright (c) 2018 Sebastian Boegl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'groovy'
    id 'jacoco'
    id 'eclipse'
    id 'idea'
    id 'signing'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.9.7"
    id "com.jfrog.bintray" version "1.7.3"
    id "nu.studer.plugindev" version "1.0.6"
    id "com.jfrog.artifactory" version "4.4.12"
}

// Write the plugin's classpath to a file to share with the tests.
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

repositories {
    jcenter()
}

ext {
    ARTIFACT_VERSION = '3.12'
    groovy_version = '2.4.15'
    spock_version = '1.1-groovy-2.4'
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'com.thoughtworks.xstream:xstream:1.4.10'
    compile ("net.sf.launch4j:launch4j:${ARTIFACT_VERSION}:core") {
//        exclude(group: 'dsol')
        exclude(group: 'org.apache.batik', module: '*')
        exclude(group: 'org.apache.ant', module: '*')
        exclude(group: 'net.java.abeille', module: '*')
        exclude(group: 'com.jgoodies', module: '*')
        exclude(group: 'foxtrot', module: '*')
        exclude(group: 'com.thoughtworks.xstream', module: 'xstream')
    }

    testCompile gradleTestKit()
    testCompile ("org.spockframework:spock-core:${spock_version}") {
        exclude module: 'junit-dep'
        exclude module: 'groovy-all'
    }

    // Add the classpath file to the test runtime classpath.
    testRuntime files(createClasspathManifest)
}

configurations.all {
    resolutionStrategy {
        force "org.codehaus.groovy:groovy-all:${groovy_version}"
    }
}

group "edu.sc.seis.gradle"
// use semantic versioning (http://semver.org/)
version "2.4.4"

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

plugindev {
    pluginId 'edu.sc.seis.launch4j'
    pluginName 'gradle-launch4j'
    pluginImplementationClass 'edu.sc.seis.launch4j.Launch4jPlugin'
    pluginDescription 'A gradle-plugin that uses launch4j to create windows .exe files for java applications.'
    pluginLicenses 'Apache-2.0'
    pluginTags 'gradle', 'launch4j', 'executable', 'wrapper'
    authorId 'theboegl'
    authorName 'Sebastian Bögl'
    authorEmail 'info@sebastianboegl.de'
    projectUrl 'https://github.com/TheBoegl/gradle-launch4j'
    projectInceptionYear '2012'
    pomConfiguration {
        name project.name
        description 'A gradle-plugin that uses launch4j to create windows .exe files for java applications.'
        url 'https://github.com/TheBoegl/gradle-launch4j/'
        scm {
            url 'https://github.com/TheBoegl/gradle-launch4j/'
            connection 'scm:git:git://github.com/TheBoegl/gradle-launch4j.git'
            developerConnection 'scm:git:git@github.com:TheBoegl/gradle-launch4j.git'
        }
        licenses {
            license {
                name 'Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'theboegl'
                name 'Sebastian Bögl'
                email 'info@sebastianboegl.de'
            }
        }
        issueManagement {
            system 'github'
            url 'https://github.com/TheBoegl/gradle-launch4j/issues'
        }
    }
    done() // do not omit this
}

pluginBundle {
    website = 'https://github.com/TheBoegl/gradle-launch4j'
    vcsUrl = 'https://github.com/TheBoegl/gradle-launch4j'
    description = 'A gradle-plugin to create windows executables with launch4j for Java application.'
    tags = ['launch4j', 'executable', 'wrapper']

    plugins {
        launch4j {
            id = 'edu.sc.seis.launch4j'
            displayName = 'launch4j gradle plugin'
        }
    }
}

bintray {
    pkg {
        repo = 'gradle-plugins'
        version {
            vcsTag = "v${project.version}"
        }
    }
}

publishPlugins.dependsOn build


if (!project.hasProperty("artifactory_ojo_user")) {
    ext.artifactory_ojo_user = "user"
    ext.artifactory_ojo_password = "password"
}

artifactory {
    contextUrl = "https://oss.jfrog.org/artifactory"
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = "${artifactory_ojo_user}"
            password = "${artifactory_ojo_password}"
        }
        defaults {
            publications 'plugin'
        }
    }
}

signing {
    if (System.console()) {
        sign configurations.archives
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

//createReleaseTag.dependsOn publish

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
    distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(Test) {
    systemProperty 'org.gradle.testkit.debug', System.getProperty('org.gradle.testkit.debug', 'false')
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

check.dependsOn jacocoTestReport
